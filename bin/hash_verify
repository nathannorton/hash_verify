#!/usr/bin/env ruby
# 
# This app will read a config file, check that it is valid,
# and if so will get the hash of all files defined in the 
# config. Once hashes have been generated it will
# then push them to a mongo instance that we can query
# from there and perform an action against the verified data. 

require 'yaml'
require 'find'
require 'fileutils'
require 'socket'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'hash_verify'


CONFIG = YAML.load_file("/etc/hash_verify/hash_verify.conf") unless defined? CONFIG


def verify_hash( files, action )
  files.each do |f|
    case action
      when "delete" then 
        verify_hash_action_delete( f ) 
      when "notify" then 
        verify_hash_action_notify( f ) 
      when "none" then 
        verify_hash_action_none( f ) 
      when "script" then 
        verify_hash_action_script( f )       
    end
  end
end

def verify_hash_action_none( file ) 
  puts "null action, on file #{file}"
end 

def verify_hash_action_delete( file )
  pub = convert_to_local_pub( file ) 

  # get the hash so we can compare
  hash = @hasher.generate_hash( file )

  if @dbase.check_in_pub?( pub, hash ) and  @dbase.different_host?( pub )
    File.delete file
    puts "The following file has been deleted: #{file}!"

    if (Dir.entries( File.dirname( file ) ) - %w{ .  .. } ).empty?
      puts "dir is empty deleting #{File.dirname( file )}"
      Dir.delete(File.dirname( file ))
    end
  end
end

def verify_hash_action_script( file ) 
  puts "TODO:  stub"  
end 


# convert a data directory to a local pub location string 
# usefule for cases where the fiels are baced up to a remote machine
# and the path gets modified along the way
def convert_to_local_pub( path )
  return path unless @transform 

  hostname = Socket.gethostname.split(".")[0]

  # strip out all but the last part of the file 
  # /data/market/20111101/20111101-any.zblock
  # /pubfs/pub/data/shopping/location4/20110528/20110528-any.block.file
  res = path.split("/").last(2)
  
  local = @transform.chomp('/')
  local += '/'
  
  full = "#{local}#{hostname}/#{res.join("/")}"
end 


# TODO: redo check if the different hashing algos are used !!
# possibly send an email to notify 
def verify_hash_action_notify( file )
  hash = @hasher.generate_hash( file )
  res  = @dbase.search_hashes( file ) 

  unless hash.to_s.eql?( res["hash"]  ) 
    
    puts "Host:\t\t#{res["host"]}"
    puts "File:\t\t#{file}"
    puts "Database date:\t#{res["date"]}"
    puts "Current date:\t#{Time.now}"
    puts "Old hash:\t#{res["algo"]},\t#{res["hash"]}"
    puts "New hash:\t#{@hasher.algo},\t#{hash.to_s}"
    puts ""
    
  end
end


# this will trawl the files listed in the config 
# files. 
# These is 3 cases that are valid:
#   1. file is a directory, recursive set to "n"
#           - this will work on contents of directory
#   2. file is a directory, recursive set to "y"
#           - this will do a recursive generation on all sub dirs
#   3. file is a file, recursive set to "n"
#           - will do only the listed file 
# NOTE: symlinks are skipped
def find_files( config )
  files = []
  config.each do |c|
    Config.verify_config_dirs( c )

    dir = c["directory"].chomp("/")
    recursive = Config.convert_yaml_bools( c["recursive"] ) 
    
    if File.directory? dir 
      unless recursive
        Dir.glob( "#{dir}/*" ).each do |d|
          files << d unless File.directory? d or File.symlink? d
        end
      else
        Dir.glob("#{dir}/**/*").each do |d|
          files << d unless File.directory? d or File.symlink? d 
        end        
      end
    else
      Dir.glob( dir ).each do |d|
        files << d  
      end
    end
  end
  files
end

def setup_variables() 
  raise "Config file not found" if CONFIG.nil?
  raise "Config file not filled out" unless CONFIG

  @dbase = Database

  @hasher = Hasher
  @hasher.algo = Digest::SHA256

  @transform = Config.check_transform( CONFIG ) 
end
    
def main() 
  setup_variables()

  Config.clean_yaml( CONFIG )

  # set up the db and make sure we can connect 
  @dbase.setup_db(  CONFIG['connection'], CONFIG['auth'] ) 

  # generate lists of files we need to verify and or publish
  verify_files  = []
  publish_files = []

  verify_files = find_files( CONFIG['verify'] ) unless CONFIG['verify'].nil?
  publish_files = find_files( CONFIG['do_hash'] ) unless CONFIG['do_hash'].nil?
  
  # publish the hashes we have found
  publish_files.each do |fn|
    hash = @hasher.generate_hash( fn ) unless @dbase.contains?( fn )
    @dbase.publish_hash( hash, fn ) unless @dbase.contains?( fn ) 
  end

  # verify the local hashes to what we have in the db
  verify_hash( verify_files, Config.action )  unless verify_files.empty?
end


main if __FILE__ == $0 
